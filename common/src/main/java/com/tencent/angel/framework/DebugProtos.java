// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/debug.proto

package com.tencent.angel.core;

public final class DebugProtos {
  private DebugProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DebugTensorWatchOrBuilder extends
      // @@protoc_insertion_point(interface_extends:angel.DebugTensorWatch)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name of the node to watch.
     * </pre>
     *
     * <code>optional string node_name = 1;</code>
     */
    java.lang.String getNodeName();
    /**
     * <pre>
     * Name of the node to watch.
     * </pre>
     *
     * <code>optional string node_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNodeNameBytes();

    /**
     * <pre>
     * Output slot to watch.
     * The semantics of output_slot == -1 is that the node is only watched for
     * completion, but not for any output tensors. See NodeCompletionCallback
     * in debug_gateway.h.
     * TODO(cais): Implement this semantics.
     * </pre>
     *
     * <code>optional int32 output_slot = 2;</code>
     */
    int getOutputSlot();

    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    java.util.List<java.lang.String>
        getDebugOpsList();
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    int getDebugOpsCount();
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    java.lang.String getDebugOps(int index);
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    com.google.protobuf.ByteString
        getDebugOpsBytes(int index);

    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    java.util.List<java.lang.String>
        getDebugUrlsList();
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    int getDebugUrlsCount();
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    java.lang.String getDebugUrls(int index);
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    com.google.protobuf.ByteString
        getDebugUrlsBytes(int index);

    /**
     * <pre>
     * Do not error out if debug op creation fails (e.g., due to dtype
     * incompatibility). Instead, just log the failure.
     * </pre>
     *
     * <code>optional bool tolerate_debug_op_creation_failures = 5;</code>
     */
    boolean getTolerateDebugOpCreationFailures();
  }
  /**
   * <pre>
   * Option for watching a node in TensorFlow Debugger (tfdbg).
   * </pre>
   *
   * Protobuf type {@code angel.DebugTensorWatch}
   */
  public  static final class DebugTensorWatch extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:angel.DebugTensorWatch)
      DebugTensorWatchOrBuilder {
    // Use DebugTensorWatch.newBuilder() to construct.
    private DebugTensorWatch(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DebugTensorWatch() {
      nodeName_ = "";
      outputSlot_ = 0;
      debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      tolerateDebugOpCreationFailures_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DebugTensorWatch(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              nodeName_ = s;
              break;
            }
            case 16: {

              outputSlot_ = input.readInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                debugOps_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              debugOps_.add(s);
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                debugUrls_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              debugUrls_.add(s);
              break;
            }
            case 40: {

              tolerateDebugOpCreationFailures_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          debugOps_ = debugOps_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          debugUrls_ = debugUrls_.getUnmodifiableView();
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugTensorWatch_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugTensorWatch_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tencent.angel.core.DebugProtos.DebugTensorWatch.class, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder.class);
    }

    private int bitField0_;
    public static final int NODE_NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object nodeName_;
    /**
     * <pre>
     * Name of the node to watch.
     * </pre>
     *
     * <code>optional string node_name = 1;</code>
     */
    public java.lang.String getNodeName() {
      java.lang.Object ref = nodeName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nodeName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name of the node to watch.
     * </pre>
     *
     * <code>optional string node_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNodeNameBytes() {
      java.lang.Object ref = nodeName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nodeName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OUTPUT_SLOT_FIELD_NUMBER = 2;
    private int outputSlot_;
    /**
     * <pre>
     * Output slot to watch.
     * The semantics of output_slot == -1 is that the node is only watched for
     * completion, but not for any output tensors. See NodeCompletionCallback
     * in debug_gateway.h.
     * TODO(cais): Implement this semantics.
     * </pre>
     *
     * <code>optional int32 output_slot = 2;</code>
     */
    public int getOutputSlot() {
      return outputSlot_;
    }

    public static final int DEBUG_OPS_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList debugOps_;
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDebugOpsList() {
      return debugOps_;
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public int getDebugOpsCount() {
      return debugOps_.size();
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public java.lang.String getDebugOps(int index) {
      return debugOps_.get(index);
    }
    /**
     * <pre>
     * Name(s) of the debugging op(s).
     * One or more than one probes on a tensor.
     * e.g., {"DebugIdentity", "DebugNanCount"}
     * </pre>
     *
     * <code>repeated string debug_ops = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDebugOpsBytes(int index) {
      return debugOps_.getByteString(index);
    }

    public static final int DEBUG_URLS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList debugUrls_;
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getDebugUrlsList() {
      return debugUrls_;
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public int getDebugUrlsCount() {
      return debugUrls_.size();
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public java.lang.String getDebugUrls(int index) {
      return debugUrls_.get(index);
    }
    /**
     * <pre>
     * URL(s) for debug targets(s).
     * Supported URL formats are:
     *   - file:///foo/tfdbg_dump: Writes out Event content to file
     *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
     *     already exist.
     *   - grpc://localhost:11011: Sends an RPC request to an EventListener
     *     service running at localhost:11011 with the event.
     *   - memcbk:///event_key: Routes tensors to clients using the
     *     callback registered with the DebugCallbackRegistry for event_key.
     * Each debug op listed in debug_ops will publish its output tensor (debug
     * signal) to all URLs in debug_urls.
     * N.B. Session::Run() supports concurrent invocations of the same inputs
     * (feed keys), outputs and target nodes. If such concurrent invocations
     * are to be debugged, the callers of Session::Run() must use distinct
     * debug_urls to make sure that the streamed or dumped events do not overlap
     * among the invocations.
     * TODO(cais): More visible documentation of this in g3docs.
     * </pre>
     *
     * <code>repeated string debug_urls = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDebugUrlsBytes(int index) {
      return debugUrls_.getByteString(index);
    }

    public static final int TOLERATE_DEBUG_OP_CREATION_FAILURES_FIELD_NUMBER = 5;
    private boolean tolerateDebugOpCreationFailures_;
    /**
     * <pre>
     * Do not error out if debug op creation fails (e.g., due to dtype
     * incompatibility). Instead, just log the failure.
     * </pre>
     *
     * <code>optional bool tolerate_debug_op_creation_failures = 5;</code>
     */
    public boolean getTolerateDebugOpCreationFailures() {
      return tolerateDebugOpCreationFailures_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNodeNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, nodeName_);
      }
      if (outputSlot_ != 0) {
        output.writeInt32(2, outputSlot_);
      }
      for (int i = 0; i < debugOps_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, debugOps_.getRaw(i));
      }
      for (int i = 0; i < debugUrls_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, debugUrls_.getRaw(i));
      }
      if (tolerateDebugOpCreationFailures_ != false) {
        output.writeBool(5, tolerateDebugOpCreationFailures_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNodeNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, nodeName_);
      }
      if (outputSlot_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, outputSlot_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < debugOps_.size(); i++) {
          dataSize += computeStringSizeNoTag(debugOps_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDebugOpsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < debugUrls_.size(); i++) {
          dataSize += computeStringSizeNoTag(debugUrls_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getDebugUrlsList().size();
      }
      if (tolerateDebugOpCreationFailures_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, tolerateDebugOpCreationFailures_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tencent.angel.core.DebugProtos.DebugTensorWatch)) {
        return super.equals(obj);
      }
      com.tencent.angel.core.DebugProtos.DebugTensorWatch other = (com.tencent.angel.core.DebugProtos.DebugTensorWatch) obj;

      boolean result = true;
      result = result && getNodeName()
          .equals(other.getNodeName());
      result = result && (getOutputSlot()
          == other.getOutputSlot());
      result = result && getDebugOpsList()
          .equals(other.getDebugOpsList());
      result = result && getDebugUrlsList()
          .equals(other.getDebugUrlsList());
      result = result && (getTolerateDebugOpCreationFailures()
          == other.getTolerateDebugOpCreationFailures());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + NODE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getNodeName().hashCode();
      hash = (37 * hash) + OUTPUT_SLOT_FIELD_NUMBER;
      hash = (53 * hash) + getOutputSlot();
      if (getDebugOpsCount() > 0) {
        hash = (37 * hash) + DEBUG_OPS_FIELD_NUMBER;
        hash = (53 * hash) + getDebugOpsList().hashCode();
      }
      if (getDebugUrlsCount() > 0) {
        hash = (37 * hash) + DEBUG_URLS_FIELD_NUMBER;
        hash = (53 * hash) + getDebugUrlsList().hashCode();
      }
      hash = (37 * hash) + TOLERATE_DEBUG_OP_CREATION_FAILURES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTolerateDebugOpCreationFailures());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tencent.angel.core.DebugProtos.DebugTensorWatch prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Option for watching a node in TensorFlow Debugger (tfdbg).
     * </pre>
     *
     * Protobuf type {@code angel.DebugTensorWatch}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:angel.DebugTensorWatch)
        com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugTensorWatch_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugTensorWatch_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tencent.angel.core.DebugProtos.DebugTensorWatch.class, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder.class);
      }

      // Construct using com.tencent.angel.core.DebugProtos.DebugTensorWatch.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        nodeName_ = "";

        outputSlot_ = 0;

        debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        tolerateDebugOpCreationFailures_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugTensorWatch_descriptor;
      }

      public com.tencent.angel.core.DebugProtos.DebugTensorWatch getDefaultInstanceForType() {
        return com.tencent.angel.core.DebugProtos.DebugTensorWatch.getDefaultInstance();
      }

      public com.tencent.angel.core.DebugProtos.DebugTensorWatch build() {
        com.tencent.angel.core.DebugProtos.DebugTensorWatch result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.tencent.angel.core.DebugProtos.DebugTensorWatch buildPartial() {
        com.tencent.angel.core.DebugProtos.DebugTensorWatch result = new com.tencent.angel.core.DebugProtos.DebugTensorWatch(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.nodeName_ = nodeName_;
        result.outputSlot_ = outputSlot_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          debugOps_ = debugOps_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.debugOps_ = debugOps_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          debugUrls_ = debugUrls_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.debugUrls_ = debugUrls_;
        result.tolerateDebugOpCreationFailures_ = tolerateDebugOpCreationFailures_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tencent.angel.core.DebugProtos.DebugTensorWatch) {
          return mergeFrom((com.tencent.angel.core.DebugProtos.DebugTensorWatch)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tencent.angel.core.DebugProtos.DebugTensorWatch other) {
        if (other == com.tencent.angel.core.DebugProtos.DebugTensorWatch.getDefaultInstance()) return this;
        if (!other.getNodeName().isEmpty()) {
          nodeName_ = other.nodeName_;
          onChanged();
        }
        if (other.getOutputSlot() != 0) {
          setOutputSlot(other.getOutputSlot());
        }
        if (!other.debugOps_.isEmpty()) {
          if (debugOps_.isEmpty()) {
            debugOps_ = other.debugOps_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureDebugOpsIsMutable();
            debugOps_.addAll(other.debugOps_);
          }
          onChanged();
        }
        if (!other.debugUrls_.isEmpty()) {
          if (debugUrls_.isEmpty()) {
            debugUrls_ = other.debugUrls_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDebugUrlsIsMutable();
            debugUrls_.addAll(other.debugUrls_);
          }
          onChanged();
        }
        if (other.getTolerateDebugOpCreationFailures() != false) {
          setTolerateDebugOpCreationFailures(other.getTolerateDebugOpCreationFailures());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tencent.angel.core.DebugProtos.DebugTensorWatch parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tencent.angel.core.DebugProtos.DebugTensorWatch) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object nodeName_ = "";
      /**
       * <pre>
       * Name of the node to watch.
       * </pre>
       *
       * <code>optional string node_name = 1;</code>
       */
      public java.lang.String getNodeName() {
        java.lang.Object ref = nodeName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nodeName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name of the node to watch.
       * </pre>
       *
       * <code>optional string node_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNodeNameBytes() {
        java.lang.Object ref = nodeName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nodeName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name of the node to watch.
       * </pre>
       *
       * <code>optional string node_name = 1;</code>
       */
      public Builder setNodeName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        nodeName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the node to watch.
       * </pre>
       *
       * <code>optional string node_name = 1;</code>
       */
      public Builder clearNodeName() {
        
        nodeName_ = getDefaultInstance().getNodeName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name of the node to watch.
       * </pre>
       *
       * <code>optional string node_name = 1;</code>
       */
      public Builder setNodeNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        nodeName_ = value;
        onChanged();
        return this;
      }

      private int outputSlot_ ;
      /**
       * <pre>
       * Output slot to watch.
       * The semantics of output_slot == -1 is that the node is only watched for
       * completion, but not for any output tensors. See NodeCompletionCallback
       * in debug_gateway.h.
       * TODO(cais): Implement this semantics.
       * </pre>
       *
       * <code>optional int32 output_slot = 2;</code>
       */
      public int getOutputSlot() {
        return outputSlot_;
      }
      /**
       * <pre>
       * Output slot to watch.
       * The semantics of output_slot == -1 is that the node is only watched for
       * completion, but not for any output tensors. See NodeCompletionCallback
       * in debug_gateway.h.
       * TODO(cais): Implement this semantics.
       * </pre>
       *
       * <code>optional int32 output_slot = 2;</code>
       */
      public Builder setOutputSlot(int value) {
        
        outputSlot_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Output slot to watch.
       * The semantics of output_slot == -1 is that the node is only watched for
       * completion, but not for any output tensors. See NodeCompletionCallback
       * in debug_gateway.h.
       * TODO(cais): Implement this semantics.
       * </pre>
       *
       * <code>optional int32 output_slot = 2;</code>
       */
      public Builder clearOutputSlot() {
        
        outputSlot_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDebugOpsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          debugOps_ = new com.google.protobuf.LazyStringArrayList(debugOps_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getDebugOpsList() {
        return debugOps_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public int getDebugOpsCount() {
        return debugOps_.size();
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public java.lang.String getDebugOps(int index) {
        return debugOps_.get(index);
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public com.google.protobuf.ByteString
          getDebugOpsBytes(int index) {
        return debugOps_.getByteString(index);
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public Builder setDebugOps(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugOpsIsMutable();
        debugOps_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public Builder addDebugOps(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugOpsIsMutable();
        debugOps_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public Builder addAllDebugOps(
          java.lang.Iterable<java.lang.String> values) {
        ensureDebugOpsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, debugOps_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public Builder clearDebugOps() {
        debugOps_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name(s) of the debugging op(s).
       * One or more than one probes on a tensor.
       * e.g., {"DebugIdentity", "DebugNanCount"}
       * </pre>
       *
       * <code>repeated string debug_ops = 3;</code>
       */
      public Builder addDebugOpsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDebugOpsIsMutable();
        debugOps_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureDebugUrlsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          debugUrls_ = new com.google.protobuf.LazyStringArrayList(debugUrls_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getDebugUrlsList() {
        return debugUrls_.getUnmodifiableView();
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public int getDebugUrlsCount() {
        return debugUrls_.size();
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public java.lang.String getDebugUrls(int index) {
        return debugUrls_.get(index);
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public com.google.protobuf.ByteString
          getDebugUrlsBytes(int index) {
        return debugUrls_.getByteString(index);
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public Builder setDebugUrls(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugUrlsIsMutable();
        debugUrls_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public Builder addDebugUrls(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureDebugUrlsIsMutable();
        debugUrls_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public Builder addAllDebugUrls(
          java.lang.Iterable<java.lang.String> values) {
        ensureDebugUrlsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, debugUrls_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public Builder clearDebugUrls() {
        debugUrls_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * URL(s) for debug targets(s).
       * Supported URL formats are:
       *   - file:///foo/tfdbg_dump: Writes out Event content to file
       *     /foo/tfdbg_dump.  Assumes all directories can be created if they don't
       *     already exist.
       *   - grpc://localhost:11011: Sends an RPC request to an EventListener
       *     service running at localhost:11011 with the event.
       *   - memcbk:///event_key: Routes tensors to clients using the
       *     callback registered with the DebugCallbackRegistry for event_key.
       * Each debug op listed in debug_ops will publish its output tensor (debug
       * signal) to all URLs in debug_urls.
       * N.B. Session::Run() supports concurrent invocations of the same inputs
       * (feed keys), outputs and target nodes. If such concurrent invocations
       * are to be debugged, the callers of Session::Run() must use distinct
       * debug_urls to make sure that the streamed or dumped events do not overlap
       * among the invocations.
       * TODO(cais): More visible documentation of this in g3docs.
       * </pre>
       *
       * <code>repeated string debug_urls = 4;</code>
       */
      public Builder addDebugUrlsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureDebugUrlsIsMutable();
        debugUrls_.add(value);
        onChanged();
        return this;
      }

      private boolean tolerateDebugOpCreationFailures_ ;
      /**
       * <pre>
       * Do not error out if debug op creation fails (e.g., due to dtype
       * incompatibility). Instead, just log the failure.
       * </pre>
       *
       * <code>optional bool tolerate_debug_op_creation_failures = 5;</code>
       */
      public boolean getTolerateDebugOpCreationFailures() {
        return tolerateDebugOpCreationFailures_;
      }
      /**
       * <pre>
       * Do not error out if debug op creation fails (e.g., due to dtype
       * incompatibility). Instead, just log the failure.
       * </pre>
       *
       * <code>optional bool tolerate_debug_op_creation_failures = 5;</code>
       */
      public Builder setTolerateDebugOpCreationFailures(boolean value) {
        
        tolerateDebugOpCreationFailures_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Do not error out if debug op creation fails (e.g., due to dtype
       * incompatibility). Instead, just log the failure.
       * </pre>
       *
       * <code>optional bool tolerate_debug_op_creation_failures = 5;</code>
       */
      public Builder clearTolerateDebugOpCreationFailures() {
        
        tolerateDebugOpCreationFailures_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:angel.DebugTensorWatch)
    }

    // @@protoc_insertion_point(class_scope:angel.DebugTensorWatch)
    private static final com.tencent.angel.core.DebugProtos.DebugTensorWatch DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tencent.angel.core.DebugProtos.DebugTensorWatch();
    }

    public static com.tencent.angel.core.DebugProtos.DebugTensorWatch getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DebugTensorWatch>
        PARSER = new com.google.protobuf.AbstractParser<DebugTensorWatch>() {
      public DebugTensorWatch parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DebugTensorWatch(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DebugTensorWatch> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DebugTensorWatch> getParserForType() {
      return PARSER;
    }

    public com.tencent.angel.core.DebugProtos.DebugTensorWatch getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DebugOptionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:angel.DebugOptions)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch> 
        getDebugTensorWatchOptsList();
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    com.tencent.angel.core.DebugProtos.DebugTensorWatch getDebugTensorWatchOpts(int index);
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    int getDebugTensorWatchOptsCount();
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    java.util.List<? extends com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder> 
        getDebugTensorWatchOptsOrBuilderList();
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder getDebugTensorWatchOptsOrBuilder(
        int index);

    /**
     * <pre>
     * Caller-specified global step count.
     * Note that this is distinct from the session run count and the executor
     * step count.
     * </pre>
     *
     * <code>optional int64 global_step = 10;</code>
     */
    long getGlobalStep();

    /**
     * <pre>
     * Whether the total disk usage of tfdbg is to be reset to zero
     * in this Session.run call. This is used by wrappers and hooks
     * such as the local CLI ones to indicate that the dumped tensors
     * are cleaned up from the disk after each Session.run.
     * </pre>
     *
     * <code>optional bool reset_disk_byte_usage = 11;</code>
     */
    boolean getResetDiskByteUsage();
  }
  /**
   * <pre>
   * Options for initializing DebuggerState in TensorFlow Debugger (tfdbg).
   * </pre>
   *
   * Protobuf type {@code angel.DebugOptions}
   */
  public  static final class DebugOptions extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:angel.DebugOptions)
      DebugOptionsOrBuilder {
    // Use DebugOptions.newBuilder() to construct.
    private DebugOptions(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DebugOptions() {
      debugTensorWatchOpts_ = java.util.Collections.emptyList();
      globalStep_ = 0L;
      resetDiskByteUsage_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DebugOptions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                debugTensorWatchOpts_ = new java.util.ArrayList<com.tencent.angel.core.DebugProtos.DebugTensorWatch>();
                mutable_bitField0_ |= 0x00000001;
              }
              debugTensorWatchOpts_.add(
                  input.readMessage(com.tencent.angel.core.DebugProtos.DebugTensorWatch.parser(), extensionRegistry));
              break;
            }
            case 80: {

              globalStep_ = input.readInt64();
              break;
            }
            case 88: {

              resetDiskByteUsage_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          debugTensorWatchOpts_ = java.util.Collections.unmodifiableList(debugTensorWatchOpts_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugOptions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugOptions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tencent.angel.core.DebugProtos.DebugOptions.class, com.tencent.angel.core.DebugProtos.DebugOptions.Builder.class);
    }

    private int bitField0_;
    public static final int DEBUG_TENSOR_WATCH_OPTS_FIELD_NUMBER = 4;
    private java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch> debugTensorWatchOpts_;
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    public java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch> getDebugTensorWatchOptsList() {
      return debugTensorWatchOpts_;
    }
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    public java.util.List<? extends com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder> 
        getDebugTensorWatchOptsOrBuilderList() {
      return debugTensorWatchOpts_;
    }
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    public int getDebugTensorWatchOptsCount() {
      return debugTensorWatchOpts_.size();
    }
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    public com.tencent.angel.core.DebugProtos.DebugTensorWatch getDebugTensorWatchOpts(int index) {
      return debugTensorWatchOpts_.get(index);
    }
    /**
     * <pre>
     * Debugging options
     * </pre>
     *
     * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
     */
    public com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder getDebugTensorWatchOptsOrBuilder(
        int index) {
      return debugTensorWatchOpts_.get(index);
    }

    public static final int GLOBAL_STEP_FIELD_NUMBER = 10;
    private long globalStep_;
    /**
     * <pre>
     * Caller-specified global step count.
     * Note that this is distinct from the session run count and the executor
     * step count.
     * </pre>
     *
     * <code>optional int64 global_step = 10;</code>
     */
    public long getGlobalStep() {
      return globalStep_;
    }

    public static final int RESET_DISK_BYTE_USAGE_FIELD_NUMBER = 11;
    private boolean resetDiskByteUsage_;
    /**
     * <pre>
     * Whether the total disk usage of tfdbg is to be reset to zero
     * in this Session.run call. This is used by wrappers and hooks
     * such as the local CLI ones to indicate that the dumped tensors
     * are cleaned up from the disk after each Session.run.
     * </pre>
     *
     * <code>optional bool reset_disk_byte_usage = 11;</code>
     */
    public boolean getResetDiskByteUsage() {
      return resetDiskByteUsage_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < debugTensorWatchOpts_.size(); i++) {
        output.writeMessage(4, debugTensorWatchOpts_.get(i));
      }
      if (globalStep_ != 0L) {
        output.writeInt64(10, globalStep_);
      }
      if (resetDiskByteUsage_ != false) {
        output.writeBool(11, resetDiskByteUsage_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < debugTensorWatchOpts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, debugTensorWatchOpts_.get(i));
      }
      if (globalStep_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, globalStep_);
      }
      if (resetDiskByteUsage_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, resetDiskByteUsage_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tencent.angel.core.DebugProtos.DebugOptions)) {
        return super.equals(obj);
      }
      com.tencent.angel.core.DebugProtos.DebugOptions other = (com.tencent.angel.core.DebugProtos.DebugOptions) obj;

      boolean result = true;
      result = result && getDebugTensorWatchOptsList()
          .equals(other.getDebugTensorWatchOptsList());
      result = result && (getGlobalStep()
          == other.getGlobalStep());
      result = result && (getResetDiskByteUsage()
          == other.getResetDiskByteUsage());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDebugTensorWatchOptsCount() > 0) {
        hash = (37 * hash) + DEBUG_TENSOR_WATCH_OPTS_FIELD_NUMBER;
        hash = (53 * hash) + getDebugTensorWatchOptsList().hashCode();
      }
      hash = (37 * hash) + GLOBAL_STEP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGlobalStep());
      hash = (37 * hash) + RESET_DISK_BYTE_USAGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getResetDiskByteUsage());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebugOptions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tencent.angel.core.DebugProtos.DebugOptions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Options for initializing DebuggerState in TensorFlow Debugger (tfdbg).
     * </pre>
     *
     * Protobuf type {@code angel.DebugOptions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:angel.DebugOptions)
        com.tencent.angel.core.DebugProtos.DebugOptionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugOptions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugOptions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tencent.angel.core.DebugProtos.DebugOptions.class, com.tencent.angel.core.DebugProtos.DebugOptions.Builder.class);
      }

      // Construct using com.tencent.angel.core.DebugProtos.DebugOptions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDebugTensorWatchOptsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (debugTensorWatchOptsBuilder_ == null) {
          debugTensorWatchOpts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          debugTensorWatchOptsBuilder_.clear();
        }
        globalStep_ = 0L;

        resetDiskByteUsage_ = false;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebugOptions_descriptor;
      }

      public com.tencent.angel.core.DebugProtos.DebugOptions getDefaultInstanceForType() {
        return com.tencent.angel.core.DebugProtos.DebugOptions.getDefaultInstance();
      }

      public com.tencent.angel.core.DebugProtos.DebugOptions build() {
        com.tencent.angel.core.DebugProtos.DebugOptions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.tencent.angel.core.DebugProtos.DebugOptions buildPartial() {
        com.tencent.angel.core.DebugProtos.DebugOptions result = new com.tencent.angel.core.DebugProtos.DebugOptions(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (debugTensorWatchOptsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            debugTensorWatchOpts_ = java.util.Collections.unmodifiableList(debugTensorWatchOpts_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.debugTensorWatchOpts_ = debugTensorWatchOpts_;
        } else {
          result.debugTensorWatchOpts_ = debugTensorWatchOptsBuilder_.build();
        }
        result.globalStep_ = globalStep_;
        result.resetDiskByteUsage_ = resetDiskByteUsage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tencent.angel.core.DebugProtos.DebugOptions) {
          return mergeFrom((com.tencent.angel.core.DebugProtos.DebugOptions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tencent.angel.core.DebugProtos.DebugOptions other) {
        if (other == com.tencent.angel.core.DebugProtos.DebugOptions.getDefaultInstance()) return this;
        if (debugTensorWatchOptsBuilder_ == null) {
          if (!other.debugTensorWatchOpts_.isEmpty()) {
            if (debugTensorWatchOpts_.isEmpty()) {
              debugTensorWatchOpts_ = other.debugTensorWatchOpts_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDebugTensorWatchOptsIsMutable();
              debugTensorWatchOpts_.addAll(other.debugTensorWatchOpts_);
            }
            onChanged();
          }
        } else {
          if (!other.debugTensorWatchOpts_.isEmpty()) {
            if (debugTensorWatchOptsBuilder_.isEmpty()) {
              debugTensorWatchOptsBuilder_.dispose();
              debugTensorWatchOptsBuilder_ = null;
              debugTensorWatchOpts_ = other.debugTensorWatchOpts_;
              bitField0_ = (bitField0_ & ~0x00000001);
              debugTensorWatchOptsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDebugTensorWatchOptsFieldBuilder() : null;
            } else {
              debugTensorWatchOptsBuilder_.addAllMessages(other.debugTensorWatchOpts_);
            }
          }
        }
        if (other.getGlobalStep() != 0L) {
          setGlobalStep(other.getGlobalStep());
        }
        if (other.getResetDiskByteUsage() != false) {
          setResetDiskByteUsage(other.getResetDiskByteUsage());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tencent.angel.core.DebugProtos.DebugOptions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tencent.angel.core.DebugProtos.DebugOptions) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch> debugTensorWatchOpts_ =
        java.util.Collections.emptyList();
      private void ensureDebugTensorWatchOptsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          debugTensorWatchOpts_ = new java.util.ArrayList<com.tencent.angel.core.DebugProtos.DebugTensorWatch>(debugTensorWatchOpts_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.DebugProtos.DebugTensorWatch, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder, com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder> debugTensorWatchOptsBuilder_;

      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch> getDebugTensorWatchOptsList() {
        if (debugTensorWatchOptsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(debugTensorWatchOpts_);
        } else {
          return debugTensorWatchOptsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public int getDebugTensorWatchOptsCount() {
        if (debugTensorWatchOptsBuilder_ == null) {
          return debugTensorWatchOpts_.size();
        } else {
          return debugTensorWatchOptsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebugTensorWatch getDebugTensorWatchOpts(int index) {
        if (debugTensorWatchOptsBuilder_ == null) {
          return debugTensorWatchOpts_.get(index);
        } else {
          return debugTensorWatchOptsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder setDebugTensorWatchOpts(
          int index, com.tencent.angel.core.DebugProtos.DebugTensorWatch value) {
        if (debugTensorWatchOptsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.set(index, value);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder setDebugTensorWatchOpts(
          int index, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder builderForValue) {
        if (debugTensorWatchOptsBuilder_ == null) {
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.set(index, builderForValue.build());
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder addDebugTensorWatchOpts(com.tencent.angel.core.DebugProtos.DebugTensorWatch value) {
        if (debugTensorWatchOptsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.add(value);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder addDebugTensorWatchOpts(
          int index, com.tencent.angel.core.DebugProtos.DebugTensorWatch value) {
        if (debugTensorWatchOptsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.add(index, value);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder addDebugTensorWatchOpts(
          com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder builderForValue) {
        if (debugTensorWatchOptsBuilder_ == null) {
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.add(builderForValue.build());
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder addDebugTensorWatchOpts(
          int index, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder builderForValue) {
        if (debugTensorWatchOptsBuilder_ == null) {
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.add(index, builderForValue.build());
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder addAllDebugTensorWatchOpts(
          java.lang.Iterable<? extends com.tencent.angel.core.DebugProtos.DebugTensorWatch> values) {
        if (debugTensorWatchOptsBuilder_ == null) {
          ensureDebugTensorWatchOptsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, debugTensorWatchOpts_);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder clearDebugTensorWatchOpts() {
        if (debugTensorWatchOptsBuilder_ == null) {
          debugTensorWatchOpts_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public Builder removeDebugTensorWatchOpts(int index) {
        if (debugTensorWatchOptsBuilder_ == null) {
          ensureDebugTensorWatchOptsIsMutable();
          debugTensorWatchOpts_.remove(index);
          onChanged();
        } else {
          debugTensorWatchOptsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder getDebugTensorWatchOptsBuilder(
          int index) {
        return getDebugTensorWatchOptsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder getDebugTensorWatchOptsOrBuilder(
          int index) {
        if (debugTensorWatchOptsBuilder_ == null) {
          return debugTensorWatchOpts_.get(index);  } else {
          return debugTensorWatchOptsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public java.util.List<? extends com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder> 
           getDebugTensorWatchOptsOrBuilderList() {
        if (debugTensorWatchOptsBuilder_ != null) {
          return debugTensorWatchOptsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(debugTensorWatchOpts_);
        }
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder addDebugTensorWatchOptsBuilder() {
        return getDebugTensorWatchOptsFieldBuilder().addBuilder(
            com.tencent.angel.core.DebugProtos.DebugTensorWatch.getDefaultInstance());
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder addDebugTensorWatchOptsBuilder(
          int index) {
        return getDebugTensorWatchOptsFieldBuilder().addBuilder(
            index, com.tencent.angel.core.DebugProtos.DebugTensorWatch.getDefaultInstance());
      }
      /**
       * <pre>
       * Debugging options
       * </pre>
       *
       * <code>repeated .angel.DebugTensorWatch debug_tensor_watch_opts = 4;</code>
       */
      public java.util.List<com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder> 
           getDebugTensorWatchOptsBuilderList() {
        return getDebugTensorWatchOptsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.DebugProtos.DebugTensorWatch, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder, com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder> 
          getDebugTensorWatchOptsFieldBuilder() {
        if (debugTensorWatchOptsBuilder_ == null) {
          debugTensorWatchOptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.tencent.angel.core.DebugProtos.DebugTensorWatch, com.tencent.angel.core.DebugProtos.DebugTensorWatch.Builder, com.tencent.angel.core.DebugProtos.DebugTensorWatchOrBuilder>(
                  debugTensorWatchOpts_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          debugTensorWatchOpts_ = null;
        }
        return debugTensorWatchOptsBuilder_;
      }

      private long globalStep_ ;
      /**
       * <pre>
       * Caller-specified global step count.
       * Note that this is distinct from the session run count and the executor
       * step count.
       * </pre>
       *
       * <code>optional int64 global_step = 10;</code>
       */
      public long getGlobalStep() {
        return globalStep_;
      }
      /**
       * <pre>
       * Caller-specified global step count.
       * Note that this is distinct from the session run count and the executor
       * step count.
       * </pre>
       *
       * <code>optional int64 global_step = 10;</code>
       */
      public Builder setGlobalStep(long value) {
        
        globalStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Caller-specified global step count.
       * Note that this is distinct from the session run count and the executor
       * step count.
       * </pre>
       *
       * <code>optional int64 global_step = 10;</code>
       */
      public Builder clearGlobalStep() {
        
        globalStep_ = 0L;
        onChanged();
        return this;
      }

      private boolean resetDiskByteUsage_ ;
      /**
       * <pre>
       * Whether the total disk usage of tfdbg is to be reset to zero
       * in this Session.run call. This is used by wrappers and hooks
       * such as the local CLI ones to indicate that the dumped tensors
       * are cleaned up from the disk after each Session.run.
       * </pre>
       *
       * <code>optional bool reset_disk_byte_usage = 11;</code>
       */
      public boolean getResetDiskByteUsage() {
        return resetDiskByteUsage_;
      }
      /**
       * <pre>
       * Whether the total disk usage of tfdbg is to be reset to zero
       * in this Session.run call. This is used by wrappers and hooks
       * such as the local CLI ones to indicate that the dumped tensors
       * are cleaned up from the disk after each Session.run.
       * </pre>
       *
       * <code>optional bool reset_disk_byte_usage = 11;</code>
       */
      public Builder setResetDiskByteUsage(boolean value) {
        
        resetDiskByteUsage_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether the total disk usage of tfdbg is to be reset to zero
       * in this Session.run call. This is used by wrappers and hooks
       * such as the local CLI ones to indicate that the dumped tensors
       * are cleaned up from the disk after each Session.run.
       * </pre>
       *
       * <code>optional bool reset_disk_byte_usage = 11;</code>
       */
      public Builder clearResetDiskByteUsage() {
        
        resetDiskByteUsage_ = false;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:angel.DebugOptions)
    }

    // @@protoc_insertion_point(class_scope:angel.DebugOptions)
    private static final com.tencent.angel.core.DebugProtos.DebugOptions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tencent.angel.core.DebugProtos.DebugOptions();
    }

    public static com.tencent.angel.core.DebugProtos.DebugOptions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DebugOptions>
        PARSER = new com.google.protobuf.AbstractParser<DebugOptions>() {
      public DebugOptions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DebugOptions(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DebugOptions> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DebugOptions> getParserForType() {
      return PARSER;
    }

    public com.tencent.angel.core.DebugProtos.DebugOptions getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DebuggedSourceFileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:angel.DebuggedSourceFile)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The host name on which a source code file is located.
     * </pre>
     *
     * <code>optional string host = 1;</code>
     */
    java.lang.String getHost();
    /**
     * <pre>
     * The host name on which a source code file is located.
     * </pre>
     *
     * <code>optional string host = 1;</code>
     */
    com.google.protobuf.ByteString
        getHostBytes();

    /**
     * <pre>
     * Path to the source code file.
     * </pre>
     *
     * <code>optional string file_path = 2;</code>
     */
    java.lang.String getFilePath();
    /**
     * <pre>
     * Path to the source code file.
     * </pre>
     *
     * <code>optional string file_path = 2;</code>
     */
    com.google.protobuf.ByteString
        getFilePathBytes();

    /**
     * <pre>
     * The timestamp at which the source code file is last modified.
     * </pre>
     *
     * <code>optional int64 last_modified = 3;</code>
     */
    long getLastModified();

    /**
     * <pre>
     * Byte size of the file.
     * </pre>
     *
     * <code>optional int64 bytes = 4;</code>
     */
    long getBytes();

    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    java.util.List<java.lang.String>
        getLinesList();
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    int getLinesCount();
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    java.lang.String getLines(int index);
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    com.google.protobuf.ByteString
        getLinesBytes(int index);
  }
  /**
   * Protobuf type {@code angel.DebuggedSourceFile}
   */
  public  static final class DebuggedSourceFile extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:angel.DebuggedSourceFile)
      DebuggedSourceFileOrBuilder {
    // Use DebuggedSourceFile.newBuilder() to construct.
    private DebuggedSourceFile(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DebuggedSourceFile() {
      host_ = "";
      filePath_ = "";
      lastModified_ = 0L;
      bytes_ = 0L;
      lines_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DebuggedSourceFile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              host_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              filePath_ = s;
              break;
            }
            case 24: {

              lastModified_ = input.readInt64();
              break;
            }
            case 32: {

              bytes_ = input.readInt64();
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                lines_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              lines_.add(s);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          lines_ = lines_.getUnmodifiableView();
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFile_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tencent.angel.core.DebugProtos.DebuggedSourceFile.class, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder.class);
    }

    private int bitField0_;
    public static final int HOST_FIELD_NUMBER = 1;
    private volatile java.lang.Object host_;
    /**
     * <pre>
     * The host name on which a source code file is located.
     * </pre>
     *
     * <code>optional string host = 1;</code>
     */
    public java.lang.String getHost() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        host_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The host name on which a source code file is located.
     * </pre>
     *
     * <code>optional string host = 1;</code>
     */
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        host_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FILE_PATH_FIELD_NUMBER = 2;
    private volatile java.lang.Object filePath_;
    /**
     * <pre>
     * Path to the source code file.
     * </pre>
     *
     * <code>optional string file_path = 2;</code>
     */
    public java.lang.String getFilePath() {
      java.lang.Object ref = filePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        filePath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Path to the source code file.
     * </pre>
     *
     * <code>optional string file_path = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFilePathBytes() {
      java.lang.Object ref = filePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LAST_MODIFIED_FIELD_NUMBER = 3;
    private long lastModified_;
    /**
     * <pre>
     * The timestamp at which the source code file is last modified.
     * </pre>
     *
     * <code>optional int64 last_modified = 3;</code>
     */
    public long getLastModified() {
      return lastModified_;
    }

    public static final int BYTES_FIELD_NUMBER = 4;
    private long bytes_;
    /**
     * <pre>
     * Byte size of the file.
     * </pre>
     *
     * <code>optional int64 bytes = 4;</code>
     */
    public long getBytes() {
      return bytes_;
    }

    public static final int LINES_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList lines_;
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getLinesList() {
      return lines_;
    }
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    public int getLinesCount() {
      return lines_.size();
    }
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    public java.lang.String getLines(int index) {
      return lines_.get(index);
    }
    /**
     * <pre>
     * Line-by-line content of the source code file.
     * </pre>
     *
     * <code>repeated string lines = 5;</code>
     */
    public com.google.protobuf.ByteString
        getLinesBytes(int index) {
      return lines_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getHostBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, host_);
      }
      if (!getFilePathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, filePath_);
      }
      if (lastModified_ != 0L) {
        output.writeInt64(3, lastModified_);
      }
      if (bytes_ != 0L) {
        output.writeInt64(4, bytes_);
      }
      for (int i = 0; i < lines_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, lines_.getRaw(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getHostBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, host_);
      }
      if (!getFilePathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, filePath_);
      }
      if (lastModified_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, lastModified_);
      }
      if (bytes_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, bytes_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < lines_.size(); i++) {
          dataSize += computeStringSizeNoTag(lines_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getLinesList().size();
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tencent.angel.core.DebugProtos.DebuggedSourceFile)) {
        return super.equals(obj);
      }
      com.tencent.angel.core.DebugProtos.DebuggedSourceFile other = (com.tencent.angel.core.DebugProtos.DebuggedSourceFile) obj;

      boolean result = true;
      result = result && getHost()
          .equals(other.getHost());
      result = result && getFilePath()
          .equals(other.getFilePath());
      result = result && (getLastModified()
          == other.getLastModified());
      result = result && (getBytes()
          == other.getBytes());
      result = result && getLinesList()
          .equals(other.getLinesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + HOST_FIELD_NUMBER;
      hash = (53 * hash) + getHost().hashCode();
      hash = (37 * hash) + FILE_PATH_FIELD_NUMBER;
      hash = (53 * hash) + getFilePath().hashCode();
      hash = (37 * hash) + LAST_MODIFIED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLastModified());
      hash = (37 * hash) + BYTES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBytes());
      if (getLinesCount() > 0) {
        hash = (37 * hash) + LINES_FIELD_NUMBER;
        hash = (53 * hash) + getLinesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tencent.angel.core.DebugProtos.DebuggedSourceFile prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code angel.DebuggedSourceFile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:angel.DebuggedSourceFile)
        com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tencent.angel.core.DebugProtos.DebuggedSourceFile.class, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder.class);
      }

      // Construct using com.tencent.angel.core.DebugProtos.DebuggedSourceFile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        host_ = "";

        filePath_ = "";

        lastModified_ = 0L;

        bytes_ = 0L;

        lines_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFile_descriptor;
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile getDefaultInstanceForType() {
        return com.tencent.angel.core.DebugProtos.DebuggedSourceFile.getDefaultInstance();
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile build() {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile buildPartial() {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFile result = new com.tencent.angel.core.DebugProtos.DebuggedSourceFile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.host_ = host_;
        result.filePath_ = filePath_;
        result.lastModified_ = lastModified_;
        result.bytes_ = bytes_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          lines_ = lines_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.lines_ = lines_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tencent.angel.core.DebugProtos.DebuggedSourceFile) {
          return mergeFrom((com.tencent.angel.core.DebugProtos.DebuggedSourceFile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tencent.angel.core.DebugProtos.DebuggedSourceFile other) {
        if (other == com.tencent.angel.core.DebugProtos.DebuggedSourceFile.getDefaultInstance()) return this;
        if (!other.getHost().isEmpty()) {
          host_ = other.host_;
          onChanged();
        }
        if (!other.getFilePath().isEmpty()) {
          filePath_ = other.filePath_;
          onChanged();
        }
        if (other.getLastModified() != 0L) {
          setLastModified(other.getLastModified());
        }
        if (other.getBytes() != 0L) {
          setBytes(other.getBytes());
        }
        if (!other.lines_.isEmpty()) {
          if (lines_.isEmpty()) {
            lines_ = other.lines_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLinesIsMutable();
            lines_.addAll(other.lines_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tencent.angel.core.DebugProtos.DebuggedSourceFile) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object host_ = "";
      /**
       * <pre>
       * The host name on which a source code file is located.
       * </pre>
       *
       * <code>optional string host = 1;</code>
       */
      public java.lang.String getHost() {
        java.lang.Object ref = host_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          host_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The host name on which a source code file is located.
       * </pre>
       *
       * <code>optional string host = 1;</code>
       */
      public com.google.protobuf.ByteString
          getHostBytes() {
        java.lang.Object ref = host_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          host_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The host name on which a source code file is located.
       * </pre>
       *
       * <code>optional string host = 1;</code>
       */
      public Builder setHost(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        host_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The host name on which a source code file is located.
       * </pre>
       *
       * <code>optional string host = 1;</code>
       */
      public Builder clearHost() {
        
        host_ = getDefaultInstance().getHost();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The host name on which a source code file is located.
       * </pre>
       *
       * <code>optional string host = 1;</code>
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        host_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object filePath_ = "";
      /**
       * <pre>
       * Path to the source code file.
       * </pre>
       *
       * <code>optional string file_path = 2;</code>
       */
      public java.lang.String getFilePath() {
        java.lang.Object ref = filePath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          filePath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to the source code file.
       * </pre>
       *
       * <code>optional string file_path = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFilePathBytes() {
        java.lang.Object ref = filePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to the source code file.
       * </pre>
       *
       * <code>optional string file_path = 2;</code>
       */
      public Builder setFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        filePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the source code file.
       * </pre>
       *
       * <code>optional string file_path = 2;</code>
       */
      public Builder clearFilePath() {
        
        filePath_ = getDefaultInstance().getFilePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to the source code file.
       * </pre>
       *
       * <code>optional string file_path = 2;</code>
       */
      public Builder setFilePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        filePath_ = value;
        onChanged();
        return this;
      }

      private long lastModified_ ;
      /**
       * <pre>
       * The timestamp at which the source code file is last modified.
       * </pre>
       *
       * <code>optional int64 last_modified = 3;</code>
       */
      public long getLastModified() {
        return lastModified_;
      }
      /**
       * <pre>
       * The timestamp at which the source code file is last modified.
       * </pre>
       *
       * <code>optional int64 last_modified = 3;</code>
       */
      public Builder setLastModified(long value) {
        
        lastModified_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The timestamp at which the source code file is last modified.
       * </pre>
       *
       * <code>optional int64 last_modified = 3;</code>
       */
      public Builder clearLastModified() {
        
        lastModified_ = 0L;
        onChanged();
        return this;
      }

      private long bytes_ ;
      /**
       * <pre>
       * Byte size of the file.
       * </pre>
       *
       * <code>optional int64 bytes = 4;</code>
       */
      public long getBytes() {
        return bytes_;
      }
      /**
       * <pre>
       * Byte size of the file.
       * </pre>
       *
       * <code>optional int64 bytes = 4;</code>
       */
      public Builder setBytes(long value) {
        
        bytes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Byte size of the file.
       * </pre>
       *
       * <code>optional int64 bytes = 4;</code>
       */
      public Builder clearBytes() {
        
        bytes_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList lines_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLinesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          lines_ = new com.google.protobuf.LazyStringArrayList(lines_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getLinesList() {
        return lines_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public int getLinesCount() {
        return lines_.size();
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public java.lang.String getLines(int index) {
        return lines_.get(index);
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public com.google.protobuf.ByteString
          getLinesBytes(int index) {
        return lines_.getByteString(index);
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public Builder setLines(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLinesIsMutable();
        lines_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public Builder addLines(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLinesIsMutable();
        lines_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public Builder addAllLines(
          java.lang.Iterable<java.lang.String> values) {
        ensureLinesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, lines_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public Builder clearLines() {
        lines_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Line-by-line content of the source code file.
       * </pre>
       *
       * <code>repeated string lines = 5;</code>
       */
      public Builder addLinesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureLinesIsMutable();
        lines_.add(value);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:angel.DebuggedSourceFile)
    }

    // @@protoc_insertion_point(class_scope:angel.DebuggedSourceFile)
    private static final com.tencent.angel.core.DebugProtos.DebuggedSourceFile DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tencent.angel.core.DebugProtos.DebuggedSourceFile();
    }

    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFile getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DebuggedSourceFile>
        PARSER = new com.google.protobuf.AbstractParser<DebuggedSourceFile>() {
      public DebuggedSourceFile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DebuggedSourceFile(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DebuggedSourceFile> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DebuggedSourceFile> getParserForType() {
      return PARSER;
    }

    public com.tencent.angel.core.DebugProtos.DebuggedSourceFile getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DebuggedSourceFilesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:angel.DebuggedSourceFiles)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile> 
        getSourceFilesList();
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    com.tencent.angel.core.DebugProtos.DebuggedSourceFile getSourceFiles(int index);
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    int getSourceFilesCount();
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    java.util.List<? extends com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder> 
        getSourceFilesOrBuilderList();
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder getSourceFilesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code angel.DebuggedSourceFiles}
   */
  public  static final class DebuggedSourceFiles extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:angel.DebuggedSourceFiles)
      DebuggedSourceFilesOrBuilder {
    // Use DebuggedSourceFiles.newBuilder() to construct.
    private DebuggedSourceFiles(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DebuggedSourceFiles() {
      sourceFiles_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private DebuggedSourceFiles(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                sourceFiles_ = new java.util.ArrayList<com.tencent.angel.core.DebugProtos.DebuggedSourceFile>();
                mutable_bitField0_ |= 0x00000001;
              }
              sourceFiles_.add(
                  input.readMessage(com.tencent.angel.core.DebugProtos.DebuggedSourceFile.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          sourceFiles_ = java.util.Collections.unmodifiableList(sourceFiles_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFiles_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFiles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.class, com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.Builder.class);
    }

    public static final int SOURCE_FILES_FIELD_NUMBER = 1;
    private java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile> sourceFiles_;
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    public java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile> getSourceFilesList() {
      return sourceFiles_;
    }
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    public java.util.List<? extends com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder> 
        getSourceFilesOrBuilderList() {
      return sourceFiles_;
    }
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    public int getSourceFilesCount() {
      return sourceFiles_.size();
    }
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    public com.tencent.angel.core.DebugProtos.DebuggedSourceFile getSourceFiles(int index) {
      return sourceFiles_.get(index);
    }
    /**
     * <pre>
     * A collection of source code files.
     * </pre>
     *
     * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
     */
    public com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder getSourceFilesOrBuilder(
        int index) {
      return sourceFiles_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sourceFiles_.size(); i++) {
        output.writeMessage(1, sourceFiles_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sourceFiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sourceFiles_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tencent.angel.core.DebugProtos.DebuggedSourceFiles)) {
        return super.equals(obj);
      }
      com.tencent.angel.core.DebugProtos.DebuggedSourceFiles other = (com.tencent.angel.core.DebugProtos.DebuggedSourceFiles) obj;

      boolean result = true;
      result = result && getSourceFilesList()
          .equals(other.getSourceFilesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getSourceFilesCount() > 0) {
        hash = (37 * hash) + SOURCE_FILES_FIELD_NUMBER;
        hash = (53 * hash) + getSourceFilesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tencent.angel.core.DebugProtos.DebuggedSourceFiles prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code angel.DebuggedSourceFiles}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:angel.DebuggedSourceFiles)
        com.tencent.angel.core.DebugProtos.DebuggedSourceFilesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFiles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFiles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.class, com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.Builder.class);
      }

      // Construct using com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSourceFilesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (sourceFilesBuilder_ == null) {
          sourceFiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sourceFilesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tencent.angel.core.DebugProtos.internal_static_angel_DebuggedSourceFiles_descriptor;
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFiles getDefaultInstanceForType() {
        return com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.getDefaultInstance();
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFiles build() {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFiles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.tencent.angel.core.DebugProtos.DebuggedSourceFiles buildPartial() {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFiles result = new com.tencent.angel.core.DebugProtos.DebuggedSourceFiles(this);
        int from_bitField0_ = bitField0_;
        if (sourceFilesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            sourceFiles_ = java.util.Collections.unmodifiableList(sourceFiles_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sourceFiles_ = sourceFiles_;
        } else {
          result.sourceFiles_ = sourceFilesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tencent.angel.core.DebugProtos.DebuggedSourceFiles) {
          return mergeFrom((com.tencent.angel.core.DebugProtos.DebuggedSourceFiles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tencent.angel.core.DebugProtos.DebuggedSourceFiles other) {
        if (other == com.tencent.angel.core.DebugProtos.DebuggedSourceFiles.getDefaultInstance()) return this;
        if (sourceFilesBuilder_ == null) {
          if (!other.sourceFiles_.isEmpty()) {
            if (sourceFiles_.isEmpty()) {
              sourceFiles_ = other.sourceFiles_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSourceFilesIsMutable();
              sourceFiles_.addAll(other.sourceFiles_);
            }
            onChanged();
          }
        } else {
          if (!other.sourceFiles_.isEmpty()) {
            if (sourceFilesBuilder_.isEmpty()) {
              sourceFilesBuilder_.dispose();
              sourceFilesBuilder_ = null;
              sourceFiles_ = other.sourceFiles_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sourceFilesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSourceFilesFieldBuilder() : null;
            } else {
              sourceFilesBuilder_.addAllMessages(other.sourceFiles_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tencent.angel.core.DebugProtos.DebuggedSourceFiles parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tencent.angel.core.DebugProtos.DebuggedSourceFiles) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile> sourceFiles_ =
        java.util.Collections.emptyList();
      private void ensureSourceFilesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          sourceFiles_ = new java.util.ArrayList<com.tencent.angel.core.DebugProtos.DebuggedSourceFile>(sourceFiles_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.DebugProtos.DebuggedSourceFile, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder, com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder> sourceFilesBuilder_;

      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile> getSourceFilesList() {
        if (sourceFilesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sourceFiles_);
        } else {
          return sourceFilesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public int getSourceFilesCount() {
        if (sourceFilesBuilder_ == null) {
          return sourceFiles_.size();
        } else {
          return sourceFilesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile getSourceFiles(int index) {
        if (sourceFilesBuilder_ == null) {
          return sourceFiles_.get(index);
        } else {
          return sourceFilesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder setSourceFiles(
          int index, com.tencent.angel.core.DebugProtos.DebuggedSourceFile value) {
        if (sourceFilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceFilesIsMutable();
          sourceFiles_.set(index, value);
          onChanged();
        } else {
          sourceFilesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder setSourceFiles(
          int index, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder builderForValue) {
        if (sourceFilesBuilder_ == null) {
          ensureSourceFilesIsMutable();
          sourceFiles_.set(index, builderForValue.build());
          onChanged();
        } else {
          sourceFilesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder addSourceFiles(com.tencent.angel.core.DebugProtos.DebuggedSourceFile value) {
        if (sourceFilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceFilesIsMutable();
          sourceFiles_.add(value);
          onChanged();
        } else {
          sourceFilesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder addSourceFiles(
          int index, com.tencent.angel.core.DebugProtos.DebuggedSourceFile value) {
        if (sourceFilesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSourceFilesIsMutable();
          sourceFiles_.add(index, value);
          onChanged();
        } else {
          sourceFilesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder addSourceFiles(
          com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder builderForValue) {
        if (sourceFilesBuilder_ == null) {
          ensureSourceFilesIsMutable();
          sourceFiles_.add(builderForValue.build());
          onChanged();
        } else {
          sourceFilesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder addSourceFiles(
          int index, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder builderForValue) {
        if (sourceFilesBuilder_ == null) {
          ensureSourceFilesIsMutable();
          sourceFiles_.add(index, builderForValue.build());
          onChanged();
        } else {
          sourceFilesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder addAllSourceFiles(
          java.lang.Iterable<? extends com.tencent.angel.core.DebugProtos.DebuggedSourceFile> values) {
        if (sourceFilesBuilder_ == null) {
          ensureSourceFilesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sourceFiles_);
          onChanged();
        } else {
          sourceFilesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder clearSourceFiles() {
        if (sourceFilesBuilder_ == null) {
          sourceFiles_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sourceFilesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public Builder removeSourceFiles(int index) {
        if (sourceFilesBuilder_ == null) {
          ensureSourceFilesIsMutable();
          sourceFiles_.remove(index);
          onChanged();
        } else {
          sourceFilesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder getSourceFilesBuilder(
          int index) {
        return getSourceFilesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder getSourceFilesOrBuilder(
          int index) {
        if (sourceFilesBuilder_ == null) {
          return sourceFiles_.get(index);  } else {
          return sourceFilesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public java.util.List<? extends com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder> 
           getSourceFilesOrBuilderList() {
        if (sourceFilesBuilder_ != null) {
          return sourceFilesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sourceFiles_);
        }
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder addSourceFilesBuilder() {
        return getSourceFilesFieldBuilder().addBuilder(
            com.tencent.angel.core.DebugProtos.DebuggedSourceFile.getDefaultInstance());
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder addSourceFilesBuilder(
          int index) {
        return getSourceFilesFieldBuilder().addBuilder(
            index, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.getDefaultInstance());
      }
      /**
       * <pre>
       * A collection of source code files.
       * </pre>
       *
       * <code>repeated .angel.DebuggedSourceFile source_files = 1;</code>
       */
      public java.util.List<com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder> 
           getSourceFilesBuilderList() {
        return getSourceFilesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.DebugProtos.DebuggedSourceFile, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder, com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder> 
          getSourceFilesFieldBuilder() {
        if (sourceFilesBuilder_ == null) {
          sourceFilesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.tencent.angel.core.DebugProtos.DebuggedSourceFile, com.tencent.angel.core.DebugProtos.DebuggedSourceFile.Builder, com.tencent.angel.core.DebugProtos.DebuggedSourceFileOrBuilder>(
                  sourceFiles_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          sourceFiles_ = null;
        }
        return sourceFilesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:angel.DebuggedSourceFiles)
    }

    // @@protoc_insertion_point(class_scope:angel.DebuggedSourceFiles)
    private static final com.tencent.angel.core.DebugProtos.DebuggedSourceFiles DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tencent.angel.core.DebugProtos.DebuggedSourceFiles();
    }

    public static com.tencent.angel.core.DebugProtos.DebuggedSourceFiles getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DebuggedSourceFiles>
        PARSER = new com.google.protobuf.AbstractParser<DebuggedSourceFiles>() {
      public DebuggedSourceFiles parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new DebuggedSourceFiles(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DebuggedSourceFiles> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DebuggedSourceFiles> getParserForType() {
      return PARSER;
    }

    public com.tencent.angel.core.DebugProtos.DebuggedSourceFiles getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_angel_DebugTensorWatch_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_angel_DebugTensorWatch_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_angel_DebugOptions_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_angel_DebugOptions_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_angel_DebuggedSourceFile_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_angel_DebuggedSourceFile_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_angel_DebuggedSourceFiles_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_angel_DebuggedSourceFiles_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020core/debug.proto\022\005angel\"\216\001\n\020DebugTenso" +
      "rWatch\022\021\n\tnode_name\030\001 \001(\t\022\023\n\013output_slot" +
      "\030\002 \001(\005\022\021\n\tdebug_ops\030\003 \003(\t\022\022\n\ndebug_urls\030" +
      "\004 \003(\t\022+\n#tolerate_debug_op_creation_fail" +
      "ures\030\005 \001(\010\"|\n\014DebugOptions\0228\n\027debug_tens" +
      "or_watch_opts\030\004 \003(\0132\027.angel.DebugTensorW" +
      "atch\022\023\n\013global_step\030\n \001(\003\022\035\n\025reset_disk_" +
      "byte_usage\030\013 \001(\010\"j\n\022DebuggedSourceFile\022\014" +
      "\n\004host\030\001 \001(\t\022\021\n\tfile_path\030\002 \001(\t\022\025\n\rlast_" +
      "modified\030\003 \001(\003\022\r\n\005bytes\030\004 \001(\003\022\r\n\005lines\030\005",
      " \003(\t\"F\n\023DebuggedSourceFiles\022/\n\014source_fi" +
      "les\030\001 \003(\0132\031.angel.DebuggedSourceFileB\'\n\026" +
      "com.tencent.angel.coreB\013DebugProtosP\000b\006p" +
      "roto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_angel_DebugTensorWatch_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_angel_DebugTensorWatch_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_angel_DebugTensorWatch_descriptor,
        new java.lang.String[] { "NodeName", "OutputSlot", "DebugOps", "DebugUrls", "TolerateDebugOpCreationFailures", });
    internal_static_angel_DebugOptions_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_angel_DebugOptions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_angel_DebugOptions_descriptor,
        new java.lang.String[] { "DebugTensorWatchOpts", "GlobalStep", "ResetDiskByteUsage", });
    internal_static_angel_DebuggedSourceFile_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_angel_DebuggedSourceFile_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_angel_DebuggedSourceFile_descriptor,
        new java.lang.String[] { "Host", "FilePath", "LastModified", "Bytes", "Lines", });
    internal_static_angel_DebuggedSourceFiles_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_angel_DebuggedSourceFiles_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_angel_DebuggedSourceFiles_descriptor,
        new java.lang.String[] { "SourceFiles", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
