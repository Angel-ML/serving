// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

package com.tencent.angel.core.gen;

public final class GraphProtos {
  private GraphProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GraphDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:angel.GraphDef)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef> 
        getNodeList();
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    com.tencent.angel.core.gen.NodeProto.NodeDef getNode(int index);
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    int getNodeCount();
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    java.util.List<? extends com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder> 
        getNodeOrBuilderList();
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder getNodeOrBuilder(
        int index);

    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    boolean hasVersions();
    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    com.tencent.angel.core.gen.VersionsProtos.VersionDef getVersions();
    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder getVersionsOrBuilder();

    /**
     * <pre>
     * Deprecated single version field; use versions above instead.  Since all
     * GraphDef changes before "versions" was introduced were forward
     * compatible, this field is entirely ignored.
     * </pre>
     *
     * <code>optional int32 version = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getVersion();

    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    boolean hasLibrary();
    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary getLibrary();
    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder getLibraryOrBuilder();
  }
  /**
   * <pre>
   * Represents the graph of operations
   * </pre>
   *
   * Protobuf type {@code angel.GraphDef}
   */
  public  static final class GraphDef extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:angel.GraphDef)
      GraphDefOrBuilder {
    // Use GraphDef.newBuilder() to construct.
    private GraphDef(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GraphDef() {
      node_ = java.util.Collections.emptyList();
      version_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private GraphDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                node_ = new java.util.ArrayList<com.tencent.angel.core.gen.NodeProto.NodeDef>();
                mutable_bitField0_ |= 0x00000001;
              }
              node_.add(
                  input.readMessage(com.tencent.angel.core.gen.NodeProto.NodeDef.parser(), extensionRegistry));
              break;
            }
            case 18: {
              com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder subBuilder = null;
              if (library_ != null) {
                subBuilder = library_.toBuilder();
              }
              library_ = input.readMessage(com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(library_);
                library_ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {

              version_ = input.readInt32();
              break;
            }
            case 34: {
              com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder subBuilder = null;
              if (versions_ != null) {
                subBuilder = versions_.toBuilder();
              }
              versions_ = input.readMessage(com.tencent.angel.core.gen.VersionsProtos.VersionDef.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(versions_);
                versions_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          node_ = java.util.Collections.unmodifiableList(node_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tencent.angel.core.gen.GraphProtos.internal_static_angel_GraphDef_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tencent.angel.core.gen.GraphProtos.internal_static_angel_GraphDef_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tencent.angel.core.gen.GraphProtos.GraphDef.class, com.tencent.angel.core.gen.GraphProtos.GraphDef.Builder.class);
    }

    private int bitField0_;
    public static final int NODE_FIELD_NUMBER = 1;
    private java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef> node_;
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    public java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef> getNodeList() {
      return node_;
    }
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    public java.util.List<? extends com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder> 
        getNodeOrBuilderList() {
      return node_;
    }
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    public int getNodeCount() {
      return node_.size();
    }
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    public com.tencent.angel.core.gen.NodeProto.NodeDef getNode(int index) {
      return node_.get(index);
    }
    /**
     * <code>repeated .angel.NodeDef node = 1;</code>
     */
    public com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder getNodeOrBuilder(
        int index) {
      return node_.get(index);
    }

    public static final int VERSIONS_FIELD_NUMBER = 4;
    private com.tencent.angel.core.gen.VersionsProtos.VersionDef versions_;
    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    public boolean hasVersions() {
      return versions_ != null;
    }
    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    public com.tencent.angel.core.gen.VersionsProtos.VersionDef getVersions() {
      return versions_ == null ? com.tencent.angel.core.gen.VersionsProtos.VersionDef.getDefaultInstance() : versions_;
    }
    /**
     * <pre>
     * Compatibility versions of the graph.  See core/public/version.h for version
     * history.  The GraphDef version is distinct from the TensorFlow version, and
     * each release of TensorFlow will support a range of GraphDef versions.
     * </pre>
     *
     * <code>optional .angel.VersionDef versions = 4;</code>
     */
    public com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder getVersionsOrBuilder() {
      return getVersions();
    }

    public static final int VERSION_FIELD_NUMBER = 3;
    private int version_;
    /**
     * <pre>
     * Deprecated single version field; use versions above instead.  Since all
     * GraphDef changes before "versions" was introduced were forward
     * compatible, this field is entirely ignored.
     * </pre>
     *
     * <code>optional int32 version = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getVersion() {
      return version_;
    }

    public static final int LIBRARY_FIELD_NUMBER = 2;
    private com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary library_;
    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    public boolean hasLibrary() {
      return library_ != null;
    }
    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    public com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary getLibrary() {
      return library_ == null ? com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.getDefaultInstance() : library_;
    }
    /**
     * <pre>
     * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
     * "library" provides user-defined functions.
     * Naming:
     *   * library.function.name are in a flat namespace.
     *     NOTE: We may need to change it to be hierarchical to support
     *     different orgs. E.g.,
     *     { "/google/nn", { ... }},
     *     { "/google/vision", { ... }}
     *     { "/org_foo/module_bar", { ... }}
     *     map&lt;string, FunctionDefLib&gt; named_lib;
     *   * If node[i].op is the name of one function in "library",
     *     node[i] is deemed as a function call. Otherwise, node[i].op
     *     must be a primitive operation supported by the runtime.
     * Function call semantics:
     *   * The callee may start execution as soon as some of its inputs
     *     are ready. The caller may want to use Tuple() mechanism to
     *     ensure all inputs are ready in the same time.
     *   * The consumer of return values may start executing as soon as
     *     the return values the consumer depends on are ready.  The
     *     consumer may want to use Tuple() mechanism to ensure the
     *     consumer does not start until all return values of the callee
     *     function are ready.
     * </pre>
     *
     * <code>optional .angel.FunctionDefLibrary library = 2;</code>
     */
    public com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder getLibraryOrBuilder() {
      return getLibrary();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < node_.size(); i++) {
        output.writeMessage(1, node_.get(i));
      }
      if (library_ != null) {
        output.writeMessage(2, getLibrary());
      }
      if (version_ != 0) {
        output.writeInt32(3, version_);
      }
      if (versions_ != null) {
        output.writeMessage(4, getVersions());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < node_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, node_.get(i));
      }
      if (library_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLibrary());
      }
      if (version_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, version_);
      }
      if (versions_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getVersions());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tencent.angel.core.gen.GraphProtos.GraphDef)) {
        return super.equals(obj);
      }
      com.tencent.angel.core.gen.GraphProtos.GraphDef other = (com.tencent.angel.core.gen.GraphProtos.GraphDef) obj;

      boolean result = true;
      result = result && getNodeList()
          .equals(other.getNodeList());
      result = result && (hasVersions() == other.hasVersions());
      if (hasVersions()) {
        result = result && getVersions()
            .equals(other.getVersions());
      }
      result = result && (getVersion()
          == other.getVersion());
      result = result && (hasLibrary() == other.hasLibrary());
      if (hasLibrary()) {
        result = result && getLibrary()
            .equals(other.getLibrary());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getNodeCount() > 0) {
        hash = (37 * hash) + NODE_FIELD_NUMBER;
        hash = (53 * hash) + getNodeList().hashCode();
      }
      if (hasVersions()) {
        hash = (37 * hash) + VERSIONS_FIELD_NUMBER;
        hash = (53 * hash) + getVersions().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion();
      if (hasLibrary()) {
        hash = (37 * hash) + LIBRARY_FIELD_NUMBER;
        hash = (53 * hash) + getLibrary().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tencent.angel.core.gen.GraphProtos.GraphDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tencent.angel.core.gen.GraphProtos.GraphDef prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Represents the graph of operations
     * </pre>
     *
     * Protobuf type {@code angel.GraphDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:angel.GraphDef)
        com.tencent.angel.core.gen.GraphProtos.GraphDefOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tencent.angel.core.gen.GraphProtos.internal_static_angel_GraphDef_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tencent.angel.core.gen.GraphProtos.internal_static_angel_GraphDef_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tencent.angel.core.gen.GraphProtos.GraphDef.class, com.tencent.angel.core.gen.GraphProtos.GraphDef.Builder.class);
      }

      // Construct using com.tencent.angel.core.gen.GraphProtos.GraphDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getNodeFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          nodeBuilder_.clear();
        }
        if (versionsBuilder_ == null) {
          versions_ = null;
        } else {
          versions_ = null;
          versionsBuilder_ = null;
        }
        version_ = 0;

        if (libraryBuilder_ == null) {
          library_ = null;
        } else {
          library_ = null;
          libraryBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tencent.angel.core.gen.GraphProtos.internal_static_angel_GraphDef_descriptor;
      }

      public com.tencent.angel.core.gen.GraphProtos.GraphDef getDefaultInstanceForType() {
        return com.tencent.angel.core.gen.GraphProtos.GraphDef.getDefaultInstance();
      }

      public com.tencent.angel.core.gen.GraphProtos.GraphDef build() {
        com.tencent.angel.core.gen.GraphProtos.GraphDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.tencent.angel.core.gen.GraphProtos.GraphDef buildPartial() {
        com.tencent.angel.core.gen.GraphProtos.GraphDef result = new com.tencent.angel.core.gen.GraphProtos.GraphDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (nodeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            node_ = java.util.Collections.unmodifiableList(node_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.node_ = node_;
        } else {
          result.node_ = nodeBuilder_.build();
        }
        if (versionsBuilder_ == null) {
          result.versions_ = versions_;
        } else {
          result.versions_ = versionsBuilder_.build();
        }
        result.version_ = version_;
        if (libraryBuilder_ == null) {
          result.library_ = library_;
        } else {
          result.library_ = libraryBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tencent.angel.core.gen.GraphProtos.GraphDef) {
          return mergeFrom((com.tencent.angel.core.gen.GraphProtos.GraphDef)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tencent.angel.core.gen.GraphProtos.GraphDef other) {
        if (other == com.tencent.angel.core.gen.GraphProtos.GraphDef.getDefaultInstance()) return this;
        if (nodeBuilder_ == null) {
          if (!other.node_.isEmpty()) {
            if (node_.isEmpty()) {
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNodeIsMutable();
              node_.addAll(other.node_);
            }
            onChanged();
          }
        } else {
          if (!other.node_.isEmpty()) {
            if (nodeBuilder_.isEmpty()) {
              nodeBuilder_.dispose();
              nodeBuilder_ = null;
              node_ = other.node_;
              bitField0_ = (bitField0_ & ~0x00000001);
              nodeBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNodeFieldBuilder() : null;
            } else {
              nodeBuilder_.addAllMessages(other.node_);
            }
          }
        }
        if (other.hasVersions()) {
          mergeVersions(other.getVersions());
        }
        if (other.getVersion() != 0) {
          setVersion(other.getVersion());
        }
        if (other.hasLibrary()) {
          mergeLibrary(other.getLibrary());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tencent.angel.core.gen.GraphProtos.GraphDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tencent.angel.core.gen.GraphProtos.GraphDef) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef> node_ =
        java.util.Collections.emptyList();
      private void ensureNodeIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          node_ = new java.util.ArrayList<com.tencent.angel.core.gen.NodeProto.NodeDef>(node_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.gen.NodeProto.NodeDef, com.tencent.angel.core.gen.NodeProto.NodeDef.Builder, com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder> nodeBuilder_;

      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef> getNodeList() {
        if (nodeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(node_);
        } else {
          return nodeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public int getNodeCount() {
        if (nodeBuilder_ == null) {
          return node_.size();
        } else {
          return nodeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public com.tencent.angel.core.gen.NodeProto.NodeDef getNode(int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);
        } else {
          return nodeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder setNode(
          int index, com.tencent.angel.core.gen.NodeProto.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.set(index, value);
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder setNode(
          int index, com.tencent.angel.core.gen.NodeProto.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder addNode(com.tencent.angel.core.gen.NodeProto.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder addNode(
          int index, com.tencent.angel.core.gen.NodeProto.NodeDef value) {
        if (nodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodeIsMutable();
          node_.add(index, value);
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder addNode(
          com.tencent.angel.core.gen.NodeProto.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder addNode(
          int index, com.tencent.angel.core.gen.NodeProto.NodeDef.Builder builderForValue) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder addAllNode(
          java.lang.Iterable<? extends com.tencent.angel.core.gen.NodeProto.NodeDef> values) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, node_);
          onChanged();
        } else {
          nodeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder clearNode() {
        if (nodeBuilder_ == null) {
          node_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          nodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public Builder removeNode(int index) {
        if (nodeBuilder_ == null) {
          ensureNodeIsMutable();
          node_.remove(index);
          onChanged();
        } else {
          nodeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public com.tencent.angel.core.gen.NodeProto.NodeDef.Builder getNodeBuilder(
          int index) {
        return getNodeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder getNodeOrBuilder(
          int index) {
        if (nodeBuilder_ == null) {
          return node_.get(index);  } else {
          return nodeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public java.util.List<? extends com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder> 
           getNodeOrBuilderList() {
        if (nodeBuilder_ != null) {
          return nodeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(node_);
        }
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public com.tencent.angel.core.gen.NodeProto.NodeDef.Builder addNodeBuilder() {
        return getNodeFieldBuilder().addBuilder(
            com.tencent.angel.core.gen.NodeProto.NodeDef.getDefaultInstance());
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public com.tencent.angel.core.gen.NodeProto.NodeDef.Builder addNodeBuilder(
          int index) {
        return getNodeFieldBuilder().addBuilder(
            index, com.tencent.angel.core.gen.NodeProto.NodeDef.getDefaultInstance());
      }
      /**
       * <code>repeated .angel.NodeDef node = 1;</code>
       */
      public java.util.List<com.tencent.angel.core.gen.NodeProto.NodeDef.Builder> 
           getNodeBuilderList() {
        return getNodeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.tencent.angel.core.gen.NodeProto.NodeDef, com.tencent.angel.core.gen.NodeProto.NodeDef.Builder, com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder> 
          getNodeFieldBuilder() {
        if (nodeBuilder_ == null) {
          nodeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.tencent.angel.core.gen.NodeProto.NodeDef, com.tencent.angel.core.gen.NodeProto.NodeDef.Builder, com.tencent.angel.core.gen.NodeProto.NodeDefOrBuilder>(
                  node_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          node_ = null;
        }
        return nodeBuilder_;
      }

      private com.tencent.angel.core.gen.VersionsProtos.VersionDef versions_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tencent.angel.core.gen.VersionsProtos.VersionDef, com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder, com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder> versionsBuilder_;
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public boolean hasVersions() {
        return versionsBuilder_ != null || versions_ != null;
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public com.tencent.angel.core.gen.VersionsProtos.VersionDef getVersions() {
        if (versionsBuilder_ == null) {
          return versions_ == null ? com.tencent.angel.core.gen.VersionsProtos.VersionDef.getDefaultInstance() : versions_;
        } else {
          return versionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public Builder setVersions(com.tencent.angel.core.gen.VersionsProtos.VersionDef value) {
        if (versionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          versions_ = value;
          onChanged();
        } else {
          versionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public Builder setVersions(
          com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder builderForValue) {
        if (versionsBuilder_ == null) {
          versions_ = builderForValue.build();
          onChanged();
        } else {
          versionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public Builder mergeVersions(com.tencent.angel.core.gen.VersionsProtos.VersionDef value) {
        if (versionsBuilder_ == null) {
          if (versions_ != null) {
            versions_ =
              com.tencent.angel.core.gen.VersionsProtos.VersionDef.newBuilder(versions_).mergeFrom(value).buildPartial();
          } else {
            versions_ = value;
          }
          onChanged();
        } else {
          versionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public Builder clearVersions() {
        if (versionsBuilder_ == null) {
          versions_ = null;
          onChanged();
        } else {
          versions_ = null;
          versionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder getVersionsBuilder() {
        
        onChanged();
        return getVersionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      public com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder getVersionsOrBuilder() {
        if (versionsBuilder_ != null) {
          return versionsBuilder_.getMessageOrBuilder();
        } else {
          return versions_ == null ?
              com.tencent.angel.core.gen.VersionsProtos.VersionDef.getDefaultInstance() : versions_;
        }
      }
      /**
       * <pre>
       * Compatibility versions of the graph.  See core/public/version.h for version
       * history.  The GraphDef version is distinct from the TensorFlow version, and
       * each release of TensorFlow will support a range of GraphDef versions.
       * </pre>
       *
       * <code>optional .angel.VersionDef versions = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tencent.angel.core.gen.VersionsProtos.VersionDef, com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder, com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder> 
          getVersionsFieldBuilder() {
        if (versionsBuilder_ == null) {
          versionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tencent.angel.core.gen.VersionsProtos.VersionDef, com.tencent.angel.core.gen.VersionsProtos.VersionDef.Builder, com.tencent.angel.core.gen.VersionsProtos.VersionDefOrBuilder>(
                  getVersions(),
                  getParentForChildren(),
                  isClean());
          versions_ = null;
        }
        return versionsBuilder_;
      }

      private int version_ ;
      /**
       * <pre>
       * Deprecated single version field; use versions above instead.  Since all
       * GraphDef changes before "versions" was introduced were forward
       * compatible, this field is entirely ignored.
       * </pre>
       *
       * <code>optional int32 version = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getVersion() {
        return version_;
      }
      /**
       * <pre>
       * Deprecated single version field; use versions above instead.  Since all
       * GraphDef changes before "versions" was introduced were forward
       * compatible, this field is entirely ignored.
       * </pre>
       *
       * <code>optional int32 version = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setVersion(int value) {
        
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Deprecated single version field; use versions above instead.  Since all
       * GraphDef changes before "versions" was introduced were forward
       * compatible, this field is entirely ignored.
       * </pre>
       *
       * <code>optional int32 version = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearVersion() {
        
        version_ = 0;
        onChanged();
        return this;
      }

      private com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary library_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder> libraryBuilder_;
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public boolean hasLibrary() {
        return libraryBuilder_ != null || library_ != null;
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary getLibrary() {
        if (libraryBuilder_ == null) {
          return library_ == null ? com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.getDefaultInstance() : library_;
        } else {
          return libraryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public Builder setLibrary(com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary value) {
        if (libraryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          library_ = value;
          onChanged();
        } else {
          libraryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public Builder setLibrary(
          com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder builderForValue) {
        if (libraryBuilder_ == null) {
          library_ = builderForValue.build();
          onChanged();
        } else {
          libraryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public Builder mergeLibrary(com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary value) {
        if (libraryBuilder_ == null) {
          if (library_ != null) {
            library_ =
              com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.newBuilder(library_).mergeFrom(value).buildPartial();
          } else {
            library_ = value;
          }
          onChanged();
        } else {
          libraryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public Builder clearLibrary() {
        if (libraryBuilder_ == null) {
          library_ = null;
          onChanged();
        } else {
          library_ = null;
          libraryBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder getLibraryBuilder() {
        
        onChanged();
        return getLibraryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      public com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder getLibraryOrBuilder() {
        if (libraryBuilder_ != null) {
          return libraryBuilder_.getMessageOrBuilder();
        } else {
          return library_ == null ?
              com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.getDefaultInstance() : library_;
        }
      }
      /**
       * <pre>
       * EXPERIMENTAL. DO NOT USE OR DEPEND ON THIS YET.
       * "library" provides user-defined functions.
       * Naming:
       *   * library.function.name are in a flat namespace.
       *     NOTE: We may need to change it to be hierarchical to support
       *     different orgs. E.g.,
       *     { "/google/nn", { ... }},
       *     { "/google/vision", { ... }}
       *     { "/org_foo/module_bar", { ... }}
       *     map&lt;string, FunctionDefLib&gt; named_lib;
       *   * If node[i].op is the name of one function in "library",
       *     node[i] is deemed as a function call. Otherwise, node[i].op
       *     must be a primitive operation supported by the runtime.
       * Function call semantics:
       *   * The callee may start execution as soon as some of its inputs
       *     are ready. The caller may want to use Tuple() mechanism to
       *     ensure all inputs are ready in the same time.
       *   * The consumer of return values may start executing as soon as
       *     the return values the consumer depends on are ready.  The
       *     consumer may want to use Tuple() mechanism to ensure the
       *     consumer does not start until all return values of the callee
       *     function are ready.
       * </pre>
       *
       * <code>optional .angel.FunctionDefLibrary library = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder> 
          getLibraryFieldBuilder() {
        if (libraryBuilder_ == null) {
          libraryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibrary.Builder, com.tencent.angel.core.gen.FunctionProtos.FunctionDefLibraryOrBuilder>(
                  getLibrary(),
                  getParentForChildren(),
                  isClean());
          library_ = null;
        }
        return libraryBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:angel.GraphDef)
    }

    // @@protoc_insertion_point(class_scope:angel.GraphDef)
    private static final com.tencent.angel.core.gen.GraphProtos.GraphDef DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tencent.angel.core.gen.GraphProtos.GraphDef();
    }

    public static com.tencent.angel.core.gen.GraphProtos.GraphDef getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GraphDef>
        PARSER = new com.google.protobuf.AbstractParser<GraphDef>() {
      public GraphDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new GraphDef(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GraphDef> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GraphDef> getParserForType() {
      return PARSER;
    }

    public com.tencent.angel.core.gen.GraphProtos.GraphDef getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_angel_GraphDef_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_angel_GraphDef_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013graph.proto\022\005angel\032\016node_def.proto\032\016fu" +
      "nction.proto\032\016versions.proto\"\216\001\n\010GraphDe" +
      "f\022\034\n\004node\030\001 \003(\0132\016.angel.NodeDef\022#\n\010versi" +
      "ons\030\004 \001(\0132\021.angel.VersionDef\022\023\n\007version\030" +
      "\003 \001(\005B\002\030\001\022*\n\007library\030\002 \001(\0132\031.angel.Funct" +
      "ionDefLibraryB+\n\032com.tencent.angel.core." +
      "genB\013GraphProtosP\000b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.tencent.angel.core.gen.NodeProto.getDescriptor(),
          com.tencent.angel.core.gen.FunctionProtos.getDescriptor(),
          com.tencent.angel.core.gen.VersionsProtos.getDescriptor(),
        }, assigner);
    internal_static_angel_GraphDef_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_angel_GraphDef_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_angel_GraphDef_descriptor,
        new java.lang.String[] { "Node", "Versions", "Version", "Library", });
    com.tencent.angel.core.gen.NodeProto.getDescriptor();
    com.tencent.angel.core.gen.FunctionProtos.getDescriptor();
    com.tencent.angel.core.gen.VersionsProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
